(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{546:function(a,s,t){"use strict";t.r(s);var e=t(4),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"什么是循环依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是循环依赖"}},[a._v("#")]),a._v(" 什么是循环依赖")]),a._v(" "),t("p",[a._v("就是A对象依赖了B对象, B对象依赖了A对象")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//A依赖了B")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),a._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//B依赖了A")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h2",{attrs:{id:"bean的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean的生命周期"}},[a._v("#")]),a._v(" Bean的生命周期")]),a._v(" "),t("p",[a._v("Bean的生命周期指的就是: 在Spring中, Bean是如何生成的?"),t("br"),a._v("\n被Spring管理的对象叫做Bean,Bean的生成步骤如下:")]),a._v(" "),t("ol",[t("li",[a._v("Spring扫描class得到BeanDefinition")]),a._v(" "),t("li",[a._v("根据得到的BeanDefinition去生成bean")]),a._v(" "),t("li",[a._v("首先根据class推断构造方法")]),a._v(" "),t("li",[a._v("根据推断出来的构造方法,反射,得到一个对象(暂时叫做原始对象)")]),a._v(" "),t("li",[a._v("填充原始对象中的属性(依赖注入)")]),a._v(" "),t("li",[a._v("如果原始对象中的某个方法被AOP了,那么则需要根据原始对象生成一个代理对象")]),a._v(" "),t("li",[a._v("把最终生成的代理对象放入单例池,")])]),a._v(" "),t("h2",{attrs:{id:"解决循环依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决循环依赖"}},[a._v("#")]),a._v(" 解决循环依赖")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/guojuna/images/raw/master/blog-img/2020/09/20200913233252.png",alt:"image-20200913233252279"}})]),a._v(" "),t("h2",{attrs:{id:"执行流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行流程"}},[a._v("#")]),a._v(" 执行流程")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/guojuna/images/raw/master/blog-img/2020/09/20200913230520.png",alt:"image-20200913230513703"}})]),a._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),t("p",[a._v("Spring中解决循环依赖使用三级缓存总结:")]),a._v(" "),t("ol",[t("li",[a._v("singletonObjects: 缓存某个beanName对应的经过了完整生命周期的bean")]),a._v(" "),t("li",[a._v("earlySingletonObjects: 缓存提前拿原始对象进行了AOP之后得到的代理对象,原始对象还没有进行属性注入和后续的BeanPostProcessor等生命周期")]),a._v(" "),t("li",[a._v("singletonFactories: 缓存的是一个ObjectFactory,主要用来去生成原始对象进行了AOP之后得到的代理对象,在每个Bean的生成过程中,都会提前暴露一个\n工厂,这个工厂可能用到,也可能是用不到,如果没有出现循环依赖本bean,name这个工厂无用,本bean按照自己的生命周期执行,执行完后直接把本bean放入\nsingletonObjects中即可,如果出现了循环依赖依赖了本bean,则另外那个bean执行ObjectFactory提交得到一个AOP之后的代理对象(如果有AOP的话,如果无需AOP,则直接得到一个原始对象)")]),a._v(" "),t("li",[a._v("其实还需要一个缓存,就是earlyProxyReferences,它用来记录某个原始对象是否进行过AOP了")])])])}),[],!1,null,null,null);s.default=n.exports}}]);