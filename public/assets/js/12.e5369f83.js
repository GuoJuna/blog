(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{493:function(s,n,e){"use strict";e.r(n);var a=e(4),r=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"dockerfile-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-简介"}},[s._v("#")]),s._v(" Dockerfile 简介")]),s._v(" "),e("p",[s._v("Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。")]),s._v(" "),e("p",[s._v("镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。")]),s._v(" "),e("p",[s._v("首先通过一张图来了解 Docker 镜像、容器和 Dockerfile 三者之间的关系。\n"),e("img",{attrs:{src:"assets/images/2019/docker/docker-dockerfile.png",alt:""}})]),s._v(" "),e("h2",{attrs:{id:"dockerfile-文件格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-文件格式"}},[s._v("#")]),s._v(" Dockerfile 文件格式")]),s._v(" "),e("p",[s._v("Dockerfile文件格式如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('##  Dockerfile文件格式\n\n# This dockerfile uses the ubuntu image\n# VERSION 2 - EDITION 1\n# Author: docker_user\n# Command format: Instruction [arguments / command] ..\n \n# 1、第一行必须指定 基础镜像信息\nFROM ubuntu\n \n# 2、维护者信息\nMAINTAINER docker_user docker_user@email.com\n \n# 3、镜像操作指令\nRUN echo "deb https://archive.ubuntu.com/ubuntu/ raring main universe" >> /etc/apt/sources.list\nRUN apt-get update && apt-get install -y nginx\nRUN echo "\\ndaemon off;" >> /etc/nginx/nginx.conf\n \n# 4、容器启动执行指令\nCMD /usr/sbin/nginx\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[s._v("Dockerfile 分为四部分："),e("strong",[s._v("基础镜像信息")]),s._v("、"),e("strong",[s._v("维护者信息")]),s._v("、"),e("strong",[s._v("镜像操作指令")]),s._v("、"),e("strong",[s._v("容器启动执行指令")]),s._v("。一开始必须要指明所基于的镜像名称，接下来一般会说明维护者信息；后面则是镜像操作指令，例如 RUN 指令。每执行一条RUN 指令，镜像添加新的一层，并提交；最后是 CMD 指令，来指明运行容器时的操作命令。")]),s._v(" "),e("h2",{attrs:{id:"构建镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[s._v("#")]),s._v(" 构建镜像")]),s._v(" "),e("p",[s._v("docker build 命令会根据 Dockerfile 文件及上下文构建新 Docker 镜像。构建上下文是指 Dockerfile 所在的本地路径或一个URL（Git仓库地址）。构建上下文环境会被递归处理，所以构建所指定的路径还包括了子目录，而URL还包括了其中指定的子模块。")]),s._v(" "),e("p",[s._v("将当前目录做为构建上下文时，可以像下面这样使用docker build命令构建镜像：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker build .\nSending build context to Docker daemon  6.51 MB\n...\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("Dockerfile 一般位于构建上下文的根目录下，也可以通过-f指定该文件的位置")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker build -f /path/to/a/Dockerfile .\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("构建时，还可以通过-t参数指定构建成镜像的仓库、标签。")]),s._v(" "),e("h2",{attrs:{id:"镜像标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像标签"}},[s._v("#")]),s._v(" 镜像标签")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker build -t nginx/v3 .\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("如果存在多个仓库下，或使用多个镜像标签，就可以使用多个-t参数：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker build -t nginx/v3:1.0.2 -t nginx/v3:latest .\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"简单示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简单示例"}},[s._v("#")]),s._v(" 简单示例")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 1.创建Dockerfile文件\nmkdir mynginx\ncd mynginx\nvi Dockerfile\n\n# 2.添加Dockerfile文件内容,这个 Dockerfile 很简单，一共就两行涉及到了两条指令：FROM 和 RUN，FROM 表示获取指定基础镜像，RUN 执行命令，在执行的过程中重写了 nginx 的默认页面信息，将信息替换为：Hello, Docker!\nFROM nginx\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n\n# 3.执行Dockerfile文件, 命令最后有一个. 表示当前目录\ndocker build -t nginx:v1 .\n\n# 4.构建完成后,查看所有镜像，如果存在 REPOSITORY 为 nginx 和 TAG 是 v1 的信息，就表示构建成功\ndocker images\n\n# 5.启动容器, 用 nginx 镜像启动一个容器，命名为docker_nginx_v1，并且映射了 80 端口，这样我们可以用浏览器去访问这个 nginx 服务器\ndocker run  --name docker_nginx_v1   -d -p 80:80 nginx:v1\n\n# 6.修改容器内容, 容器启动后，需要对容器内的文件进行进一步的完善，可以使用docker exec -it xx bash命令再次进行修改\ndocker exec -it docker_nginx_v1   bash\nroot@3729b97e8226:/# echo '<h1>Hello, Docker neo!</h1>' > /usr/share/nginx/html/index.html\nroot@3729b97e8226:/# exit\nexit\n\n# 7.修改了容器的文件，也就是改动了容器的存储层，可以通过 docker diff 命令看到具体的改动\ndocker diff docker_nginx_v1 \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);